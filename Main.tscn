[gd_scene load_steps=10 format=3 uid="uid://1codskawidgn"]

[ext_resource type="PackedScene" uid="uid://bv5xvq8pu355b" path="res://Boat.tscn" id="1_glv2v"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_ig7tw"]

[sub_resource type="Sky" id="Sky_0xm2m"]
sky_material = SubResource("ProceduralSkyMaterial_ig7tw")

[sub_resource type="Environment" id="Environment_h2yge"]
background_mode = 2
sky = SubResource("Sky_0xm2m")
tonemap_mode = 2
tonemap_exposure = 1.3
tonemap_white = 0.7

[sub_resource type="PlaneMesh" id="1"]
size = Vector2(1000, 1000)

[sub_resource type="Shader" id="Shader_ig7tw"]
code = "shader_type spatial;
render_mode unshaded; // This makes it look flat and cartoony, ignoring lights.

// -- Water Colors --
uniform vec4 deep_color : source_color = vec4(0.1, 0.4, 0.8, 1.0);
uniform vec4 foam_color : source_color = vec4(0.6, 0.8, 1.0, 1.0);

// -- Wave Controls --
uniform float noise_scale = 10.0;
uniform float time_speed = 0.05;
uniform float foam_hardness : hint_range(0.0, 1.0) = 0.5; // How sharp the edge is
uniform int octaves = 4; // How many layers of noise to add for detail

// --- Noise Functions (The Magic Behind the Waves) ---

// A simple function to generate a random-ish number from a 2D vector
float random(vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
}

// 2D Noise function based on the random one
float noise(vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);

    // Four corners in a grid
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

    // Smoothly interpolate between the corners
    vec2 u = f * f * (3.0 - 2.0 * f);
    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.y * u.x;
}

// FBM - Fractional Brownian Motion (adds layers of noise)
float fbm(vec2 st) {
    float value = 0.0;
    float amplitude = 0.5;
    float frequency = 0.0;

    for (int i = 0; i < octaves; i++) {
        value += amplitude * noise(st);
        st *= 2.0;
        amplitude *= 0.5;
    }
    return value;
}


// --- Main Fragment Shader ---

void fragment() {
    // Animate the UV coordinates using TIME
    // We create two layers of noise moving in different directions for a more natural look
    vec2 motion1 = vec2(UV.x + TIME * time_speed, UV.y + TIME * time_speed);
    vec2 motion2 = vec2(UV.x - TIME * time_speed, UV.y + TIME * time_speed * 0.5);

    // Calculate two layers of FBM noise and add them together
    float fbm_value = fbm(motion1 * noise_scale) + fbm(motion2 * noise_scale);

    // Use step() to create a hard, cartoony edge between the two colors
    float toon_mask = step(foam_hardness, fbm_value);

    // Mix the two colors based on our toon mask
    vec3 final_color = mix(deep_color.rgb, foam_color.rgb, toon_mask);

    // Apply the final color to the object
    ALBEDO = final_color;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_0xm2m"]
render_priority = 0
shader = SubResource("Shader_ig7tw")
shader_parameter/deep_color = Color(0.35785556, 0.60941297, 0.97684807, 1)
shader_parameter/foam_color = Color(0.6, 0.8, 1, 1)
shader_parameter/noise_scale = 256.0
shader_parameter/time_speed = 0.001
shader_parameter/foam_hardness = 0.90000004275
shader_parameter/octaves = 2

[sub_resource type="SphereMesh" id="3"]
radius = 40.0
height = 20.0

[sub_resource type="StandardMaterial3D" id="4"]
albedo_color = Color(0.9, 0.8, 0.4, 1)

[node name="Main" type="Node3D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_h2yge")

[node name="Sun" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.5, 0.866025, 0, -0.866025, 0.5, 0, 20, 0)

[node name="Water" type="MeshInstance3D" parent="."]
mesh = SubResource("1")
surface_material_override/0 = SubResource("ShaderMaterial_0xm2m")

[node name="Boat" parent="." instance=ExtResource("1_glv2v")]

[node name="Island1" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 50, -6, 40)
mesh = SubResource("3")
surface_material_override/0 = SubResource("4")

[node name="Island2" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -60, -6, -50)
mesh = SubResource("3")
surface_material_override/0 = SubResource("4")

[node name="Island3" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 80, -6, -30)
mesh = SubResource("3")
surface_material_override/0 = SubResource("4")

[node name="Island4" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -70, -6, 60)
mesh = SubResource("3")
surface_material_override/0 = SubResource("4")

[node name="Island5" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 100, -6, 70)
mesh = SubResource("3")
surface_material_override/0 = SubResource("4")

[node name="Island6" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -90, -6, -80)
mesh = SubResource("3")
surface_material_override/0 = SubResource("4")

[node name="Island7" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 30, -6, -90)
mesh = SubResource("3")
surface_material_override/0 = SubResource("4")

[node name="Island8" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -110, -6, 20)
mesh = SubResource("3")
surface_material_override/0 = SubResource("4")

[node name="Island9" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 120, -6, -100)
mesh = SubResource("3")
surface_material_override/0 = SubResource("4")

[node name="Island10" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -40, -6, -120)
mesh = SubResource("3")
surface_material_override/0 = SubResource("4")
